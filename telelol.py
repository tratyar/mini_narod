import telebot
from regions_dicts import regions, image, narod, test, questions, narodIm
from DatBase import Db_work
import weather
import pymorphy3

db = Db_work()
flag = True
bot = telebot.TeleBot("7738077069:AAHhp_iPvrurET3yU8y-XZPtwzxD9Xr_-LA")
morph = pymorphy3.MorphAnalyzer()
word1 = morph.parse('–±–∞–ª–ª')[0]
word2 = morph.parse('–±–æ–Ω—É—Å')[0]

users = {}
answer = []
correct_ans = 0
no_or_yes = {"1": "–î–∞", "2": "–ù–µ—Ç", "3": ""}
pol = {}
statistic = {}


def save_dat(message):
    f = open('stat.txt', encoding='utf8', mode='r')
    otv = f.readlines()
    f.close()
    res = []
    with open('stat.txt', encoding='utf8', mode='w') as file:
        for key in statistic:
            data = list(statistic[key].values())
            for el in otv:
                if str(key) in el:
                    el = list(map(int, el.split()))
                    for i in range(0, 5):
                        data[i] += el[i + 1]
                    break
            res.append(str(key) + ' ' + ' '.join(list(map(str, data))))
        for el in res:
            print(el, file=file)
    statistic.clear()
    testing(message)


def testing(message):
    if not message:
        return
    if message.from_user.id not in statistic:
        statistic[message.from_user.id] = {'ball': 0, "quest": 0, 'tru_utv': 0, 'open_reg': 0, 'open_nar': 0}


@bot.message_handler(func=lambda message: message.text == 'ü™ô –ë–æ–Ω—É—Å—ã')
@bot.callback_query_handler(func=lambda call: 'ball' in call.data)
def balllll(call):
    if call.from_user.id in statistic:
        bal = statistic[call.from_user.id]['ball']
    else:
        testing(call)
        save_dat(call)
        with open('stat.txt', encoding='utf8', mode='r') as file:
            data = file.readlines()
            for el in data:
                el = el.rstrip()
                if str(call.from_user.id) in el:
                    el = el.split()
                    bal = el[1]
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text=f"‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
    if call.__class__.__name__ == 'Message':
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message_id,
                              text=f'–£ –≤–∞—Å {bal}  {word2.make_agree_with_number(bal).word}\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ:'
                                   f'\n<–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞>', reply_markup=keyboard)
    else:
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=f'–£ –≤–∞—Å {bal}  {word2.make_agree_with_number(bal).word}\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ:'
                                   f'\n<–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞>', reply_markup=keyboard)


def set_narod_region(call, region):
    keyboard = telebot.types.InlineKeyboardMarkup()
    data = db.ret_reg_nar(region)
    for i in range(len(data)):
        keyboard.add(telebot.types.InlineKeyboardButton(text=f"{data[i]}", callback_data=f'narod_{data[i]}_{region}'))
    keyboard.add(telebot.types.InlineKeyboardButton(text=f"‚è™ –Ω–∞–∑–∞–¥", callback_data=f'region_{region}_back'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ä–æ–¥ —Å–µ–≤–µ—Ä–∞:', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'main')
def set_main(call):
    keyboard = telebot.types.InlineKeyboardMarkup()
    txt = ['ü™ô –ë–æ–Ω—É—Å—ã', 'üö© –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞—Ä–æ–¥—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –°–ø—Ä–æ—Å–∏—Ç—å —É AI', "üìù –¢–µ—Å—Ç"]
    otv = ['ball', 'selecr_reg', 'all_men', 'stat', '5', 'test_menu']
    for i in range(0, 6, 2):
        a = telebot.types.InlineKeyboardButton(text=f"{txt[i]}", callback_data=f'{otv[i]}')
        b = telebot.types.InlineKeyboardButton(text=f"{txt[i + 1]}", callback_data=f'{otv[i + 1]}')
        keyboard.add(a, b)
    if call.__class__.__name__ == 'Message':
        bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
@bot.callback_query_handler(func=lambda call: 'stat' in call.data)
def print_stat(message):
    testing(message)
    save_dat(message)
    with open('stat.txt', encoding='utf8', mode='r') as file:
        data = file.readlines()
        for el in data:
            el = el.rstrip()
            if str(message.from_user.id) in el:
                el = el.split()
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
        if message.__class__.__name__ == 'Message':
            bot.send_message(chat_id=message.from_user.id,
                             text=f'–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–ë–∞–ª–ª—ã: {el[1]}\n–í—Å–µ–≥–æ —Ç–≤–µ—á–µ–≥–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {el[2]}\n–í—Å–µ–≥–æ'
                                  f' –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {el[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–µ:'
                                  f' {el[4]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä–æ–¥–µ {el[5]}',
                             reply_markup=keyboard)
        else:
            bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                                  text=f'–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–ë–∞–ª–ª—ã: {el[1]}\n–í—Å–µ–≥–æ —Ç–≤–µ—á–µ–≥–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {el[2]}'
                                       f'\n–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {el[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ'
                                       f' —Ä–µ–≥–∏–æ–Ω–µ: {el[4]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä–æ–¥–µ {el[5]}',
                                  reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üö© –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω')
@bot.callback_query_handler(func=lambda call: 'selecr_reg' in call.data)
def set_regions(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    names = list(regions.keys())
    for i in range(0, 8, 2):
        a = telebot.types.InlineKeyboardButton(text=f"{names[i]}", callback_data=f'region_{i}')
        b = telebot.types.InlineKeyboardButton(text=f"{names[i + 1]}", callback_data=f'region_{i + 1}')
        keyboard.add(a, b)
    keyboard.add(telebot.types.InlineKeyboardButton(text=f"{names[8]}", callback_data=f'region_{8}'),
                 telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
    if message.__class__.__name__ == 'Message':
        bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω', reply_markup=keyboard)
    else:
        try:
            bot.delete_message(message.from_user.id, users[str(message.from_user.id)])
        except Exception:
            pass
        testing(message)
        statistic[message.from_user.id]['open_reg'] += 1
        bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'region_' in call.data)
def open_reg(call):
    cnt = call.data.split('_')
    data = int(cnt[1])
    region = image[data][1]
    temper = weather.reg_weather(data)
    ret = False
    if len(cnt) == 3:
        ret = True
    keyboard = telebot.types.InlineKeyboardMarkup()
    names = ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞—Ä–æ–¥—ã', 'üßë‚Äçüè≠ –ø—Ä–æ–º—ã—Å–ª—ã', 'üó∫Ô∏è –æ—Å–≤–æ–µ–Ω–∏–µ', 'üéûÔ∏è –∏—Å—Ç–æ—Ä–∏—è', 'üïê –Ω–∞—Å—Ç–æ—è—â–∏–µ', 'ü•û –±–ª—é–¥–∞', '‚≠ê –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã',
             "‚è™ –Ω–∞–∑–∞–¥"]
    db.reg_number(data)
    for i in range(0, 6, 2):
        a = telebot.types.InlineKeyboardButton(text=f"{names[i]}", callback_data=f'area_inf_{names[i]}_{data}')
        b = telebot.types.InlineKeyboardButton(text=f"{names[i + 1]}", callback_data=f'area_inf_{names[i + 1]}_{data}')
        keyboard.add(a, b)
    keyboard.add(telebot.types.InlineKeyboardButton(text=f"{names[6]}", callback_data=f'area_inf_{names[6]}_{data}'),
                 telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'selecr_reg_back'))
    if ret:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'{temper}\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=keyboard)
    else:
        bot.delete_message(call.from_user.id, call.message.message_id)
        res = bot.send_photo(call.from_user.id, open(f'regionIm\{image[data][0]}', 'rb'), caption=region)
        users[str(call.from_user.id)] = res.message_id
        bot.send_message(call.from_user.id, f'{temper}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                         reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'area_inf_' in call.data)
def open_reg_inf(call):
    data = call.data.split('_')[2:]
    if 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞—Ä–æ–¥—ã' in data[0]:
        set_narod_region(call, regions[image[int(data[1])][1]])
        return
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'region_{data[1]}_back'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'{db.ret_regions(data[0])}', reply_markup=keyboard)


@bot.message_handler(commands=["start", "restart"])
def start(message):
    if message.from_user.id not in statistic:
        keyboardgostart = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboardgostart.add(
            *[telebot.types.KeyboardButton(name) for name in ['ü™ô –ë–æ–Ω—É—Å—ã', 'üö© –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞—Ä–æ–¥—ã',
                                                              'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –°–ø—Ä–æ—Å–∏—Ç—å —É AI', "üìù –¢–µ—Å—Ç"]])
        text = f'–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ê—Ä–∫—Ç–∏–∫–∏. –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫–æ—Ä–µ–Ω–Ω—ã—Ö –º–∞–ª—ã—Ö' \
               f' –Ω–∞—Ä–æ–¥–∞—Ö —Å–µ–≤–µ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞—Ö –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–∏ –ø—Ä–æ–∂–∏–≤–∞—é—Ç. –¢–∞–∫–∂–µ —è –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å' \
               f' —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–± –ê—Ä–∫—Ç–∏–∫–µ  –∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã,' \
               f' –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —É –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –∏ –∞–∫—Ü–∏–π'
        bot.send_photo(message.chat.id, open(f'regionIm\startIm.jpg', 'rb'), caption=text, reply_markup=keyboardgostart)
    testing(message)
    set_main(message)


@bot.message_handler(func=lambda message: message.text == 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞—Ä–æ–¥—ã')
@bot.callback_query_handler(func=lambda call: call.data == 'all_men')
def set_narod_menu(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    names = list(narod.keys())
    for i in range(0, 12, 3):
        a = telebot.types.InlineKeyboardButton(text=f"{names[i]}", callback_data=f'narod_{names[i]}')
        b = telebot.types.InlineKeyboardButton(text=f"{names[i + 1]}", callback_data=f'narod_{names[i + 1]}')
        c = telebot.types.InlineKeyboardButton(text=f"{names[i + 2]}", callback_data=f'narod_{names[i + 2]}')
        keyboard.add(a, b, c)
    a = telebot.types.InlineKeyboardButton(text=f"{names[12]}", callback_data=f'narod_{names[12]}')
    keyboard.add(a, b, telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
    if message.__class__.__name__ == 'Message':
        bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ä–æ–¥', reply_markup=keyboard)
    else:
        try:
            bot.delete_message(message.from_user.id, users[message.from_user.id])
        except Exception:
            pass
        testing(message)
        statistic[message.from_user.id]['open_nar'] += 1
        bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ä–æ–¥', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'narod_' in call.data)
def print_narod(call):
    type = call.data.split('_')
    ret = False
    if len(type) == 3:
        ret = True
    type = type[1]
    keyboard = telebot.types.InlineKeyboardMarkup()
    a = telebot.types.InlineKeyboardButton(text='üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data=f'info_nar_{type}_üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    b = telebot.types.InlineKeyboardButton(text='üéûÔ∏è –ò—Å—Ç–æ—Ä–∏—è', callback_data=f'info_nar_{type}_üéûÔ∏è –ò—Å—Ç–æ—Ä–∏—è')
    c = telebot.types.InlineKeyboardButton(text='üë∫ –¢—Ä–∞–¥–∏—Ü–∏–∏', callback_data=f'info_nar_{type}_üë∫ –¢—Ä–∞–¥–∏—Ü–∏–∏')
    d = telebot.types.InlineKeyboardButton(text='ü•û –§–∏—Ä–º–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞', callback_data=f'info_nar_{type}_ü•û –§–∏—Ä–º–µ–Ω–Ω—ã–µ '
                                                                                   f'–±–ª—é–¥–∞')
    keyboard.add(a, b, c)
    keyboard.add(d, telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data='all_men'))
    if ret:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä–æ–¥–µ {type}\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=keyboard)
    else:
        bot.delete_message(call.from_user.id, call.message.message_id)
        res = bot.send_photo(call.from_user.id, narodIm[type])
        users[call.from_user.id] = res.message_id
        bot.send_message(call.from_user.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä–æ–¥–µ {type}\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                         reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'info_nar_' in call.data)
def print_narod_info(call):
    type = call.data.split('_')[2:]
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'narod_{type[0]}_back'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'{db.ret_nar(type)}', reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üìù –¢–µ—Å—Ç')
@bot.callback_query_handler(func=lambda call: call.data == 'test_menu')
def menu_test(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    b = telebot.types.InlineKeyboardButton(text=f"–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f'start_test_3')
    keyboard.add(b)
    keyboard.add(telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
    if message.__class__.__name__ == 'Message':
        bot.send_message(message.from_user.id, f'–ü—Ä–æ–π–¥–∏—Ç–µ –¢–µ—Å—Ç', reply_markup=keyboard)
    else:
        bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.message_id,
                              text=f'–ü—Ä–æ–π–¥–∏—Ç–µ –¢–µ—Å—Ç', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'start_test' in call.data)
def test_start(call):
    global answer, pol, no_or_yes, last_ans
    if call.from_user.id in pol:
        pol[call.from_user.id] += 1
    else:
        pol[call.from_user.id] = 0
    if pol[call.from_user.id] <= 13:
        keyboard = telebot.types.InlineKeyboardMarkup()
        for i in range(1):
            a = telebot.types.InlineKeyboardButton(text=f"–î–∞", callback_data=f'start_test_1')
            b = telebot.types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data=f'start_test_2')
            keyboard.add(a, b)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'{questions[pol[call.from_user.id]]}', reply_markup=keyboard)
        data = call.data.split('_')[2]
        answer.append(no_or_yes[str(data)])
    else:
        keyboard = telebot.types.InlineKeyboardMarkup()
        for i in range(1):
            a = telebot.types.InlineKeyboardButton(text=f"–î–∞", callback_data=f'congratul_test_1')
            b = telebot.types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data=f'congratul_test_2')
            keyboard.add(a, b)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f'{questions[pol[call.from_user.id]]}', reply_markup=keyboard)
        data = call.data.split('_')[2]
        answer.append(no_or_yes[str(data)])


@bot.callback_query_handler(func=lambda call: 'congratul_test' in call.data)
def congratulation(call):
    data = call.data.split('_')[2]
    morph = pymorphy3.MorphAnalyzer()
    comment = morph.parse('–≤–æ–ø—Ä–æ—Å')[0]
    global answer, correct_ans
    answer.append(no_or_yes[str(data)])
    for i in range(1, 16):
        if test[i] == answer[i - 1]:
            correct_ans += 1
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="‚è™ –Ω–∞–∑–∞–¥", callback_data=f'main'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!\n'
                               f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_ans}'
                               f' {comment.make_agree_with_number(correct_ans).word}',
                          reply_markup=keyboard)
    testing(call)
    statistic[call.from_user.id]['ball'] += correct_ans
    statistic[call.from_user.id]['quest'] += 15
    statistic[call.from_user.id]['tru_utv'] += correct_ans
    pol[call.from_user.id] = 0
    answer = []
    correct_ans = 0


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling()

message = None
save_dat(message)
